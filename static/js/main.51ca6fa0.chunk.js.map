{"version":3,"sources":["components/GlobalStateContext.tsx","utils/globalStateReducer.tsx","components/Header.tsx","components/Loader.tsx","components/picturebook/BreedList.tsx","components/picturebook/BreedButton.tsx","components/picturebook/PhotoCloseUp.tsx","components/picturebook/BreedPhotos.tsx","utils/api.ts","utils/useDogs.ts","components/picturebook/PictureBook.tsx","utils/dataViewStateReducer.ts","components/gallery/GalleryCard.tsx","components/gallery/GalleryPager.tsx","components/gallery/helpers.ts","components/gallery/BreedGallery.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalStateContext","createContext","SET_IS_LOADING_ACTION_TYPE","Symbol","SET_SEARCH_HANDLER_ACTION_TYPE","SET_SELECTED_VIEW_ACTION_TYPE","SET_ALERT_MESSAGE","globalStateReducer","state","action","type","isLoadingAction","isLoading","payload","isHeaderSearchHandlerAction","headerSearchHandler","isSelectedViewAction","selectedView","isAlertMessageAction","alertMessage","setHeaderSearchHandlerAction","dispatch","handler","setAlertMessageAction","DogsAppBar","styled","AppBar","flexGrow","MenuButton","Button","theme","margin","useStyles","makeStyles","title","spacer","Header","useContext","globalState","globalStateDispatch","useState","searchText","setSearchText","classes","setSelectedView","useCallback","color","Toolbar","Typography","variant","className","map","option","key","onClick","TextField","placeholder","value","onChange","event","searchChange","target","disabled","LightBackdrop","Backdrop","backgroundColor","palette","grey","A200","Loader","open","timeout","CircularProgress","GridWrapper","props","root","marginBottom","BreedList","matchesFound","children","Grid","container","spacing","DogToggle","ToggleButton","padding","width","height","primary","main","contrastText","dark","BreedButton","breed","selected","setSelectedBreed","handleSelectionChange","PhotoCloseUp","imageUrl","photoDimensions","onClose","photoSize","setPhotoSize","useEffect","console","log","Dialog","fullWidth","maxWidth","DialogContent","src","alt","DialogActions","icon","common","white","BreedPhotos","breedImageUrls","selectedPhoto","setSelectedPhoto","photoSizes","useRef","handleCloseCloseUp","GridList","cols","cellHeight","url","GridListTile","onLoad","image","current","naturalWidth","naturalHeight","GridListTileBar","actionIcon","IconButton","photoUrl","ZoomIn","api","axios","create","getCancelTokenSource","CancelToken","source","apiGet","cancelToken","get","useDogs","breedSampleCount","breeds","setBreeds","selectedBreed","allBreeds","setIsLoading","setErrorMessage","error","severity","message","cancelTokenSource","length","token","then","data","status","Object","keys","sort","catch","finally","cancel","loadBreedImages","Promise","resolve","all","reject","getBreedImagesUrl","imageUrls","undefined","err","searchBreeds","filter","includes","slice","totalBreeds","Book","direction","BookSection","item","overflow","PictureBook","setBreedImageUrls","imageSets","imageSet","handleBreedSelect","xs","PAGE_CHANGE_ACTION_TYPE","FILTER_CHANGE_ACTION_TYPE","APPLY_FILTER_ACTION_TYPE","SORT_CHANGE_ACTION_TYPE","OPTION_CHANGE_ACTION_TYPE","dataViewStateReducer","updateLastEventWhen","newEvent","condition","dataViewChangedEvent","updateLastChangedEvent","isPageChangeAction","offset","take","isFilterChangeAction","filters","isSortChangeAction","sorters","isApplyFilterAction","isOptionChangeAction","options","setPageAction","nativeEvent","BreedCard","Card","backgroundImage","light","CardImage","CardMedia","CardTitle","CardHeader","textTransform","GalleryCard","breedDetail","selectedIndex","setSelectedIndex","onError","CardActions","disableSpacing","size","NavigateBefore","NavigateNext","PagerButton","GalleryPager","total","onPageChange","page","pages","Math","ceil","marks","Array","fill","mark","index","label","Container","style","marginTop","e","FastRewind","Slider","min","max","FastForward","breedsAreDifferent","left","right","GridOfCards","initEvent","Event","BreedGallery","breedDetails","setBreedDetails","useReducer","initDataViewState","dataViewStateDispatch","lastChangeEvent","breedsDataSource","breedsView","changeEventIsNew","newView","breedsChanged","newOffset","checkViewStateChange","timeStamp","detail","justify","alignItems","createMuiTheme","colors","indigo","secondary","orange","BodyContainer","INITIAL_STATE","App","alertVisible","setAlertVisible","globalContext","Provider","Snackbar","autoHideDuration","Alert","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51ca6fa0.chunk.js","sourcesContent":["import { Context, createContext, Dispatch } from 'react';\n\nimport { GlobalAction, GlobalState } from '../utils/globalStateReducer';\n\nexport interface IGlobalStateContext {\n  globalState: GlobalState;\n  globalStateDispatch: Dispatch<GlobalAction<any>>;\n}\n\nexport const GlobalStateContext: Context<IGlobalStateContext> = createContext<\n  IGlobalStateContext\n>({} as IGlobalStateContext);\n","import { Reducer, Dispatch } from 'react';\n\nconst SET_IS_LOADING_ACTION_TYPE = Symbol('is loading action type');\nconst SET_SEARCH_HANDLER_ACTION_TYPE = Symbol('search handler action type');\nconst SET_SELECTED_VIEW_ACTION_TYPE = Symbol('search handler action type');\nconst SET_ALERT_MESSAGE = Symbol('alert message action type');\n\nexport type IsLoading = boolean;\nexport type HeaderSearchHandler = (searchText: string) => void;\nexport type SelectedView = string;\nexport interface AlertMessage {\n  severity: 'success' | 'error' | 'warning' | 'info';\n  message: string;\n}\n\nexport interface GlobalState {\n  isLoading: IsLoading;\n  headerSearchHandler?: HeaderSearchHandler;\n  selectedView: SelectedView;\n  alertMessage?: AlertMessage;\n}\n\nexport interface GlobalAction<T> {\n  type: Symbol;\n  payload: T;\n}\n\ntype GlobalActionFunction<T> = (\n  dispatch: Dispatch<GlobalAction<T>>\n) => (value: any) => void;\n\n// type guards\n\nconst isLoadingAction = (\n  action: GlobalAction<any>\n): action is GlobalAction<IsLoading> => {\n  return action.type === SET_IS_LOADING_ACTION_TYPE;\n};\n\nconst isHeaderSearchHandlerAction = (\n  action: GlobalAction<any>\n): action is GlobalAction<HeaderSearchHandler> => {\n  return action.type === SET_SEARCH_HANDLER_ACTION_TYPE;\n};\n\nconst isSelectedViewAction = (\n  action: GlobalAction<any>\n): action is GlobalAction<SelectedView> => {\n  return action.type === SET_SELECTED_VIEW_ACTION_TYPE;\n};\n\nconst isAlertMessageAction = (\n  action: GlobalAction<any>\n): action is GlobalAction<AlertMessage> => {\n  return action.type === SET_ALERT_MESSAGE;\n};\n\n// reducer\n\nexport const globalStateReducer: Reducer<GlobalState, GlobalAction<any>> = (\n  state,\n  action\n) => {\n  if (isLoadingAction(action)) {\n    return {\n      ...state,\n      isLoading: action.payload\n    };\n  }\n  if (isHeaderSearchHandlerAction(action)) {\n    return {\n      ...state,\n      headerSearchHandler: action.payload\n    };\n  }\n  if (isSelectedViewAction(action)) {\n    return {\n      ...state,\n      selectedView: action.payload\n    };\n  }\n  if (isAlertMessageAction(action)) {\n    return {\n      ...state,\n      alertMessage: action.payload\n    };\n  }\n\n  return state;\n};\n\n// action functions\n\nexport const setIsLoadingAction: GlobalActionFunction<IsLoading> = dispatch => (\n  isLoading: IsLoading\n) => {\n  dispatch({\n    type: SET_IS_LOADING_ACTION_TYPE,\n    payload: isLoading\n  });\n};\n\nexport const setHeaderSearchHandlerAction: GlobalActionFunction<HeaderSearchHandler> = dispatch => (\n  handler: HeaderSearchHandler\n) => {\n  dispatch({\n    type: SET_SEARCH_HANDLER_ACTION_TYPE,\n    payload: handler\n  });\n};\n\nexport const setSelectedViewAction: GlobalActionFunction<SelectedView> = dispatch => (\n  selectedView: SelectedView\n) => {\n  dispatch({\n    type: SET_SELECTED_VIEW_ACTION_TYPE,\n    payload: selectedView\n  });\n};\n\nexport const setAlertMessageAction: GlobalActionFunction<AlertMessage> = dispatch => (\n  alertMessage: AlertMessage\n) => {\n  dispatch({\n    type: SET_ALERT_MESSAGE,\n    payload: alertMessage\n  });\n};\n","import React, {\n  ChangeEvent,\n  FunctionComponent,\n  useContext,\n  useState,\n  useCallback\n} from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  TextField,\n  Button\n} from '@material-ui/core';\nimport { styled, makeStyles } from '@material-ui/core/styles';\n\nimport { GlobalStateContext } from './GlobalStateContext';\nimport { setSelectedViewAction } from '../utils/globalStateReducer';\n\nconst DogsAppBar = styled(AppBar)({\n  flexGrow: 1\n});\n\nconst MenuButton = styled(Button)(({ theme }) => ({\n  margin: '0 4px'\n}));\n\nconst useStyles = makeStyles(theme => ({\n  title: {},\n  spacer: {\n    flexGrow: 1\n  }\n}));\n\nexport const Header: FunctionComponent = () => {\n  const { globalState, globalStateDispatch } = useContext(GlobalStateContext);\n  const [searchText, setSearchText] = useState<string>('');\n  const classes = useStyles();\n  const { headerSearchHandler, selectedView } = globalState;\n\n  const setSelectedView = useCallback(\n    setSelectedViewAction(globalStateDispatch),\n    [globalStateDispatch]\n  );\n\n  const handleSearchChange = (event: ChangeEvent) => {\n    const searchChange: string = (event.target as any).value;\n    setSearchText(searchChange);\n    if (headerSearchHandler) {\n      headerSearchHandler(searchChange);\n    }\n  };\n\n  return (\n    <DogsAppBar color=\"default\">\n      <Toolbar>\n        <Typography variant=\"h6\" className={classes.title}>\n          Paws and Reflect\n        </Typography>\n        <div className={classes.spacer}></div>\n        <div>\n          {['Gallery', 'Picture Book'].map(option => (\n            <MenuButton\n              key={option}\n              color=\"secondary\"\n              variant={option === selectedView ? 'contained' : 'outlined'}\n              onClick={() => setSelectedView(option)}\n            >\n              {option}\n            </MenuButton>\n          ))}\n        </div>\n        <div className={classes.spacer}></div>\n        <div>\n          <TextField\n            variant=\"outlined\"\n            placeholder=\"Search\"\n            value={searchText}\n            onChange={handleSearchChange}\n            disabled={!headerSearchHandler}\n          />\n        </div>\n      </Toolbar>\n    </DogsAppBar>\n  );\n};\n","import React, { FunctionComponent, useContext } from 'react';\nimport { CircularProgress, Backdrop, styled } from '@material-ui/core';\n\nimport { GlobalStateContext } from './GlobalStateContext';\n\nconst LightBackdrop = styled(Backdrop)(({ theme }) => ({\n  backgroundColor: theme.palette.grey.A200\n}));\n\nexport const Loader: FunctionComponent = () => {\n  const { globalState } = useContext(GlobalStateContext);\n  return (\n    <LightBackdrop open={globalState.isLoading} timeout={1000}>\n      <CircularProgress color=\"secondary\" variant=\"indeterminate\" />\n    </LightBackdrop>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Grid, Typography, styled } from '@material-ui/core';\n\ninterface IBreedGrid {\n  matchesFound: boolean;\n}\n\nconst GridWrapper = styled(props => <div {...props}></div>)({\n  root: {\n    flexGrow: 1,\n    marginBottom: 32\n  }\n});\n\nexport const BreedList: FunctionComponent<IBreedGrid> = ({\n  matchesFound,\n  children\n}) => {\n  return matchesFound ? (\n    <GridWrapper>\n      <Grid container spacing={4}>\n        {children}\n      </Grid>\n    </GridWrapper>\n  ) : (\n    <div>\n      <Typography variant=\"h3\">No breed matches found.</Typography>\n    </div>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { styled } from '@material-ui/core';\nimport { ToggleButton } from '@material-ui/lab';\n\ninterface IBreedButton {\n  breed: string;\n  selected: boolean;\n  setSelectedBreed: (value: string) => void;\n}\n\nconst DogToggle = styled(ToggleButton)(({ theme }) => ({\n  padding: theme.spacing(1),\n  margin: theme.spacing(1),\n  width: '100%',\n  height: '100%',\n  backgroundColor: theme.palette.primary.main,\n  color: theme.palette.primary.contrastText,\n  '&:hover': {\n    backgroundColor: theme.palette.primary.dark\n  }\n}));\n\nexport const BreedButton: FunctionComponent<IBreedButton> = ({\n  breed,\n  selected,\n  setSelectedBreed\n}) => {\n  const handleSelectionChange = (breed: string) => () =>\n    setSelectedBreed(breed);\n\n  return (\n    <DogToggle\n      value={breed}\n      selected={selected}\n      onChange={handleSelectionChange(breed)}\n    >\n      {breed}\n    </DogToggle>\n  );\n};\n","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogActions,\n  Button\n} from '@material-ui/core';\n\nimport { PhotoDimensions } from './PhotoDimensions.model';\n\ninterface IPhotoCloseUp {\n  imageUrl: string;\n  photoDimensions: PhotoDimensions;\n  open: boolean;\n  onClose: () => void;\n}\n\nexport const PhotoCloseUp: FunctionComponent<IPhotoCloseUp> = ({\n  imageUrl,\n  photoDimensions = {},\n  open,\n  onClose\n}) => {\n  const [photoSize, setPhotoSize] = useState<'sm' | 'md' | 'lg' | undefined>();\n  useEffect(() => {\n    if (open && photoDimensions.width) {\n      if (photoDimensions.width >= 960) {\n        setPhotoSize('lg');\n      } else if (photoDimensions.width >= 600) {\n        setPhotoSize('md');\n      } else if (photoDimensions.width >= 440) {\n        setPhotoSize('sm');\n      }\n      console.log(`${photoDimensions?.width} by ${photoDimensions?.height}`);\n    }\n  }, [open, photoDimensions]);\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      fullWidth={!!photoSize}\n      maxWidth={photoSize}\n    >\n      <DialogContent>\n        <img src={imageUrl} alt=\"Dog\" />\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"contained\" onClick={onClose}>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import React, { FunctionComponent, useContext, useState, useRef } from 'react';\nimport {\n  GridList,\n  GridListTile,\n  GridListTileBar,\n  IconButton,\n  makeStyles\n} from '@material-ui/core';\nimport { ZoomIn } from '@material-ui/icons';\n\nimport { GlobalStateContext } from '../GlobalStateContext';\nimport { PhotoCloseUp } from './PhotoCloseUp';\nimport { PhotoDimensions } from './PhotoDimensions.model';\n\ninterface IBreedPhotos {\n  open: boolean;\n  breedImageUrls: string[];\n}\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    color: theme.palette.common.white\n  }\n}));\n\nexport const BreedPhotos: FunctionComponent<IBreedPhotos> = ({\n  open,\n  breedImageUrls\n}) => {\n  const { globalState } = useContext(GlobalStateContext);\n  const [selectedPhoto, setSelectedPhoto] = useState('');\n  const photoSizes = useRef<{\n    [key: string]: PhotoDimensions;\n  }>({});\n  const classes = useStyles();\n  const handleCloseCloseUp = () => setSelectedPhoto('');\n  const handleOpenCloseUp = (photoUrl: string) => () =>\n    setSelectedPhoto(photoUrl);\n  const setPhotoSize = (image: any) => {\n    photoSizes.current[image?.src] = {\n      width: image?.naturalWidth,\n      height: image?.naturalHeight\n    };\n  };\n  return open && !globalState.isLoading ? (\n    <GridList cols={4} cellHeight={200}>\n      {breedImageUrls.map(url => (\n        <GridListTile key={url}>\n          <img\n            src={url}\n            alt=\"Dog\"\n            onLoad={event => setPhotoSize(event.target)}\n          />\n          <GridListTileBar\n            actionIcon={\n              <IconButton\n                onClick={handleOpenCloseUp(url)}\n                className={classes.icon}\n              >\n                <ZoomIn />\n              </IconButton>\n            }\n          />\n          <PhotoCloseUp\n            imageUrl={url}\n            photoDimensions={photoSizes.current[url]}\n            open={selectedPhoto === url}\n            onClose={handleCloseCloseUp}\n          />\n        </GridListTile>\n      ))}\n    </GridList>\n  ) : (\n    <div />\n  );\n};\n","import axios, {\n  AxiosInstance,\n  AxiosResponse,\n  CancelToken,\n  CancelTokenSource\n} from \"axios\";\n\ntype ApiGet = (\n  url: string,\n  cancelToken?: CancelToken\n) => Promise<AxiosResponse<any>>;\ntype GetCancelTokenSource = () => CancelTokenSource;\n\nconst api: AxiosInstance = axios.create({ timeout: 10000 });\n\nexport const getCancelTokenSource: GetCancelTokenSource =\n  axios.CancelToken.source;\n\nexport const apiGet: ApiGet = (url, cancelToken?) =>\n  api.get(url, { cancelToken });\n","import {\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n  useContext,\n  SetStateAction,\n  Dispatch\n} from 'react';\nimport { CancelToken } from 'axios';\n\nimport { apiGet, getCancelTokenSource } from './api';\nimport {\n  setIsLoadingAction,\n  setAlertMessageAction\n} from './globalStateReducer';\nimport { GlobalStateContext } from '../components/GlobalStateContext';\n\nconst ALL_DOGS_URL = 'https://dog.ceo/api/breeds/list/all';\n\nconst getBreedImagesUrl = (breed: string) =>\n  `https://dog.ceo/api/breed/${breed}/images`;\n\ninterface IUseDogResults {\n  searchBreeds: (searchText: string) => void;\n  selectedBreed: string;\n  setSelectedBreed: Dispatch<SetStateAction<string>>;\n  breeds: string[];\n  totalBreeds: number;\n  loadBreedImages: (\n    breeds: string[],\n    cancelToken?: CancelToken\n  ) => Promise<BreedImageSet[] | null>;\n}\n\nexport interface BreedImageSet {\n  breed: string;\n  imageUrls: string[];\n}\n\ntype UseDogsCustomHook = (breedSampleCount?: number) => IUseDogResults;\n\nexport const useDogs: UseDogsCustomHook = breedSampleCount => {\n  const [breeds, setBreeds] = useState<Array<string>>([]);\n  const [selectedBreed, setSelectedBreed] = useState<string>('');\n  const allBreeds = useRef<string[]>([]);\n  const {\n    globalStateDispatch,\n    globalState: { isLoading }\n  } = useContext(GlobalStateContext);\n\n  const setIsLoading = useCallback(setIsLoadingAction(globalStateDispatch), [\n    globalStateDispatch\n  ]);\n  const setErrorMessage = useCallback(\n    error =>\n      setAlertMessageAction(globalStateDispatch)({\n        severity: 'error',\n        message: error\n      }),\n    [globalStateDispatch]\n  );\n\n  // load the list of dog breeds if it hasn't been loaded yet\n  useEffect(() => {\n    const cancelTokenSource = getCancelTokenSource();\n    if (!allBreeds.current.length) {\n      setIsLoading(true);\n      apiGet(ALL_DOGS_URL, cancelTokenSource.token)\n        .then(({ data }) => {\n          if (data.status && data.status === 'success') {\n            allBreeds.current = Object.keys(data.message).sort();\n            setBreeds(allBreeds.current);\n          } else {\n            setErrorMessage('There was a problem trying to find the dogs.');\n          }\n        })\n        .catch(() =>\n          setErrorMessage('Error! The dog data could not be loaded.')\n        )\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n    return () => {\n      cancelTokenSource.cancel();\n    };\n  }, [setBreeds, setIsLoading, setErrorMessage]);\n\n  const loadBreedImages = useCallback(\n    (\n      breeds: string[],\n      cancelToken?: CancelToken\n    ): Promise<BreedImageSet[] | null> => {\n      if (isLoading) {\n        return Promise.resolve(null);\n      }\n      setIsLoading(true);\n      return Promise.all<BreedImageSet>(\n        breeds.map(breed => {\n          return new Promise((resolve, reject) => {\n            const url = getBreedImagesUrl(breed);\n            apiGet(url, cancelToken)\n              .then(({ data }) => {\n                if (data.status && data.status === 'success') {\n                  resolve({\n                    breed,\n                    imageUrls: data.message\n                  });\n                } else {\n                  setErrorMessage(\n                    'There was a problem trying to find the photos.'\n                  );\n                  resolve(undefined);\n                }\n              })\n              .catch(err => {\n                setErrorMessage(\n                  'Error! The dog photo data could not be loaded.'\n                );\n                reject(err);\n              });\n          });\n        })\n      ).finally(() => setIsLoading(false));\n    },\n    [isLoading, setIsLoading, setErrorMessage]\n  );\n\n  // filter the list of dog breeds based on the user's search criteria\n  const searchBreeds = useCallback(\n    (searchText: string) => {\n      if (allBreeds.current.length) {\n        setIsLoading(true);\n        setBreeds(\n          allBreeds.current.filter(breed => breed.includes(searchText))\n        );\n        setIsLoading(false);\n      }\n    },\n    [allBreeds, setIsLoading]\n  );\n\n  return {\n    searchBreeds,\n    selectedBreed,\n    setSelectedBreed,\n    breeds:\n      breedSampleCount === undefined\n        ? breeds\n        : breeds.slice(0, breedSampleCount),\n    totalBreeds: breeds.length,\n    loadBreedImages\n  };\n};\n","import React, {\n  FunctionComponent,\n  useContext,\n  useEffect,\n  useState\n} from 'react';\nimport { Grid, styled } from '@material-ui/core';\n\nimport { BreedList } from './BreedList';\nimport { BreedButton } from './BreedButton';\nimport { BreedPhotos } from './BreedPhotos';\nimport { GlobalStateContext } from '../GlobalStateContext';\nimport { useDogs } from '../../utils/useDogs';\nimport { setHeaderSearchHandlerAction } from '../../utils/globalStateReducer';\n\nconst Book = styled(props => <Grid container direction=\"row\" {...props} />)({\n  height: '100vh'\n});\n\nconst BookSection = styled(props => <Grid item {...props} />)({\n  height: '100vh',\n  overflow: 'scroll'\n});\n\nexport const PictureBook: FunctionComponent = () => {\n  const [breedImageUrls, setBreedImageUrls] = useState<Array<string>>([]);\n  const {\n    searchBreeds,\n    breeds,\n    selectedBreed,\n    setSelectedBreed,\n    loadBreedImages\n  } = useDogs();\n  const { globalStateDispatch, globalState } = useContext(GlobalStateContext);\n\n  useEffect(() => {\n    setHeaderSearchHandlerAction(globalStateDispatch)(searchBreeds);\n    return () => {\n      setHeaderSearchHandlerAction(globalStateDispatch)(undefined);\n    };\n  }, [globalStateDispatch, searchBreeds]);\n\n  // load the images for the breed the user has selected\n  useEffect(() => {\n    if (!selectedBreed || breedImageUrls.length > 0) {\n      return;\n    }\n    loadBreedImages([selectedBreed])\n      .then(imageSets => {\n        if (!imageSets) {\n          return;\n        }\n        const [imageSet] = imageSets;\n        setBreedImageUrls(imageSet.imageUrls);\n      })\n      .catch(() => setSelectedBreed(''));\n  }, [\n    selectedBreed,\n    setSelectedBreed,\n    breedImageUrls,\n    setBreedImageUrls,\n    loadBreedImages\n  ]);\n\n  const handleBreedSelect = (value: string) => {\n    setBreedImageUrls([]);\n    setSelectedBreed(value);\n  };\n\n  return (\n    <Book spacing={8}>\n      <BookSection xs={2}>\n        <BreedList matchesFound={!!breeds.length || globalState.isLoading}>\n          {breeds.map(breed => (\n            <BreedButton\n              key={breed}\n              breed={breed}\n              selected={breed === selectedBreed}\n              setSelectedBreed={handleBreedSelect}\n            />\n          ))}\n        </BreedList>\n      </BookSection>\n      <BookSection xs={10}>\n        <BreedPhotos open={!!selectedBreed} breedImageUrls={breedImageUrls} />\n      </BookSection>\n    </Book>\n  );\n};\n","import { Reducer, Dispatch } from 'react';\n\ntype DataViewFilters<T> = T[];\n\ntype DataViewSorters<T> = T[];\n\ninterface Page {\n  offset: number;\n  take: number;\n}\n\ninterface Eventful {\n  dataViewChangedEvent: Event;\n}\n\ninterface DataViewEvent<T> {\n  value: T;\n  nativeEvent: Event | null;\n}\n\ntype HasOptions<O extends {}> = O;\n\nexport interface OptionlessDataViewState<F, S> extends Eventful {\n  offset: number;\n  take: number;\n  filters: DataViewFilters<F>;\n  sorters: DataViewSorters<S>;\n  dataViewChangedEvent: Event;\n}\n\ninterface Options<O> {\n  options: O;\n}\n\nexport type DataViewState<F, S, O> = OptionlessDataViewState<F, S> & Options<O>;\n\nexport interface DataViewAction<T> {\n  type: Symbol;\n  payload: T;\n  event: Event | null;\n}\n\ntype DataViewActionFunction<T> = (\n  dispatch: Dispatch<DataViewAction<T>>\n) => (event: DataViewEvent<T>, value?: any) => void;\n\nconst PAGE_CHANGE_ACTION_TYPE = Symbol('page change action type');\nconst FILTER_CHANGE_ACTION_TYPE = Symbol('filter change action type');\nconst APPLY_FILTER_ACTION_TYPE = Symbol('apply filter action type');\nconst SORT_CHANGE_ACTION_TYPE = Symbol('sort change action type');\nconst OPTION_CHANGE_ACTION_TYPE = Symbol('option change action type');\n\nexport type DataViewStateReducer<F, S, O> = Reducer<\n  DataViewState<F, S, O>,\n  DataViewAction<any>\n>;\n\n// type guards\n\nconst isPageChangeAction = (\n  action: DataViewAction<any>\n): action is DataViewAction<Page> => {\n  return action.type === PAGE_CHANGE_ACTION_TYPE;\n};\n\nconst isFilterChangeAction = (\n  action: DataViewAction<any>\n): action is DataViewAction<DataViewFilters<any>> => {\n  return action.type === FILTER_CHANGE_ACTION_TYPE;\n};\n\nconst isApplyFilterAction = (\n  action: DataViewAction<any>\n): action is DataViewAction<null> => {\n  return action.type === APPLY_FILTER_ACTION_TYPE;\n};\n\nconst isSortChangeAction = (\n  action: DataViewAction<any>\n): action is DataViewAction<DataViewSorters<any>> => {\n  return action.type === SORT_CHANGE_ACTION_TYPE;\n};\n\nconst isOptionChangeAction = <O>(\n  action: DataViewAction<any>\n): action is DataViewAction<O> => {\n  return action.type === OPTION_CHANGE_ACTION_TYPE;\n};\n\n// reducer\n\nconst updateLastChangedEvent = (state: Eventful, newEvent: Event | null) => (\n  condition: boolean\n) => (condition && !!newEvent ? newEvent : state.dataViewChangedEvent);\n\nexport const dataViewStateReducer = <F, S, O>(\n  state: DataViewState<F, S, O>,\n  action: DataViewAction<any>\n): DataViewState<F, S, O> => {\n  const updateLastEventWhen = updateLastChangedEvent(state, action.event);\n\n  if (isPageChangeAction(action)) {\n    return {\n      ...state,\n      dataViewChangedEvent: updateLastEventWhen(\n        action.payload.offset !== state.offset ||\n          action.payload.take !== state.take\n      ),\n      offset: action.payload.offset,\n      take: action.payload.take\n    };\n  }\n  if (isFilterChangeAction(action)) {\n    return {\n      ...state,\n      dataViewChangedEvent: updateLastEventWhen(\n        action.payload.length < state.filters.length\n      ),\n      filters: action.payload\n    };\n  }\n  if (isSortChangeAction(action)) {\n    return {\n      ...state,\n      dataViewChangedEvent: updateLastEventWhen(true),\n      sorters: action.payload\n    };\n  }\n  if (isApplyFilterAction(action)) {\n    return {\n      ...state,\n      offset: 0,\n      dataViewChangedEvent: updateLastEventWhen(true)\n    };\n  }\n  if (isOptionChangeAction<O>(action)) {\n    return {\n      ...state,\n      dataViewChangedEvent: updateLastEventWhen(true),\n      options: action.payload\n    };\n  }\n  return state;\n};\n\n// action functions\n\nexport const setPageAction: DataViewActionFunction<Page> = dispatch => (\n  event,\n  value?: Page\n) => {\n  dispatch({\n    type: PAGE_CHANGE_ACTION_TYPE,\n    payload: event.value || value,\n    event: event.nativeEvent\n  });\n};\n\nexport const setFilterAction: DataViewActionFunction<DataViewFilters<\n  any\n>> = dispatch => (event, value?: DataViewFilters<any>) => {\n  dispatch({\n    type: FILTER_CHANGE_ACTION_TYPE,\n    payload: event.value || value,\n    event: event.nativeEvent\n  });\n};\n\nexport const setOrderAction: DataViewActionFunction<DataViewSorters<\n  any\n>> = dispatch => (event, value?: DataViewSorters<any>) => {\n  dispatch({\n    type: SORT_CHANGE_ACTION_TYPE,\n    payload: event.value || value,\n    event: event.nativeEvent\n  });\n};\n\nexport const applyFilterAction: DataViewActionFunction<null> = dispatch => event => {\n  dispatch({\n    type: APPLY_FILTER_ACTION_TYPE,\n    payload: null,\n    event: event.nativeEvent\n  });\n};\n\nexport const setOptionsAction: DataViewActionFunction<any> = dispatch => (\n  event,\n  value?\n) => {\n  dispatch({\n    type: OPTION_CHANGE_ACTION_TYPE,\n    payload: event.value || value,\n    event: event.nativeEvent\n  });\n};\n\n// initializer\n\nexport const initDataViewState = <F, S, O>(\n  take: number,\n  options: O\n): DataViewState<F, S, O> => ({\n  offset: 0,\n  take,\n  filters: [],\n  sorters: [],\n  dataViewChangedEvent: new Event(''),\n  options\n});\n","import React, { FunctionComponent, useState } from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardMedia,\n  CardActions,\n  IconButton,\n  styled\n} from '@material-ui/core';\nimport { NavigateBefore, NavigateNext } from '@material-ui/icons';\n\nimport { BreedDetail } from './BreedDetail.model';\n\nconst BreedCard = styled(Card)(({ theme }) => ({\n  backgroundImage: `linear-gradient(${theme.palette.primary.light}, ${theme.palette.common.white})`,\n  color: theme.palette.primary.contrastText\n}));\n\nconst CardImage = styled(CardMedia)({\n  height: 220\n});\n\nconst CardTitle = styled(CardHeader)({ textTransform: 'capitalize' });\n\ninterface GalleryCardProps {\n  breedDetail: BreedDetail;\n}\n\nexport const GalleryCard: FunctionComponent<GalleryCardProps> = ({\n  breedDetail\n}) => {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const handlePrevious = () => setSelectedIndex(selectedIndex - 1);\n  const handleNext = () => setSelectedIndex(selectedIndex + 1);\n  return (\n    <BreedCard>\n      <CardTitle title={breedDetail.breed} />\n      <CardImage\n        image={breedDetail.imageUrls[selectedIndex]}\n        onError={err => console.log('ERR', err)}\n      />\n      <CardActions disableSpacing color=\"white\">\n        <IconButton\n          size=\"small\"\n          onClick={handlePrevious}\n          disabled={selectedIndex === 0}\n        >\n          <NavigateBefore />\n        </IconButton>\n        <IconButton\n          size=\"small\"\n          onClick={handleNext}\n          disabled={selectedIndex === breedDetail.imageUrls.length - 1}\n        >\n          <NavigateNext color=\"action\" />\n        </IconButton>\n      </CardActions>\n    </BreedCard>\n  );\n};\n","import React, { FunctionComponent, ChangeEvent } from 'react';\nimport { Grid, Container, Button, Slider, styled } from '@material-ui/core';\nimport { FastRewind, FastForward } from '@material-ui/icons';\n\ninterface GalleryPagerProps {\n  offset: number;\n  take: number;\n  size: number;\n  total: number;\n  onPageChange: (offset: number, take: number, event: Event) => void;\n}\n\nconst PagerButton = styled(Button)(({ theme }) => ({\n  margin: theme.spacing(2)\n}));\n\nexport const GalleryPager: FunctionComponent<GalleryPagerProps> = ({\n  offset,\n  take,\n  size,\n  total,\n  onPageChange\n}) => {\n  const page: number = offset / size + 1;\n  const pages: number = Math.ceil(total / size);\n  const handlePrevious = (event: Event) =>\n    onPageChange(offset - size, take, event);\n  const handleNext = (event: Event) => onPageChange(offset + size, take, event);\n  const handlePage = (event: ChangeEvent<any>, value: number | number[]) =>\n    onPageChange(((value as number) - 1) * size, take, event.nativeEvent);\n  const marks: any[] = Array(pages)\n    .fill({}, 0, pages)\n    .map((mark, index) => ({ value: index + 1, label: `${index + 1}` }));\n  return (\n    <Container maxWidth=\"sm\" style={{ marginTop: 16 }}>\n      <Grid container spacing={4}>\n        <Grid item xs={2}>\n          <PagerButton\n            size=\"small\"\n            variant=\"contained\"\n            color=\"secondary\"\n            disabled={offset === 0}\n            onClick={e => handlePrevious(e.nativeEvent)}\n          >\n            <FastRewind />\n          </PagerButton>\n        </Grid>\n        <Grid item xs={8}>\n          {pages > 1 && (\n            <Slider\n              value={page}\n              min={1}\n              max={pages}\n              marks={marks}\n              onChange={handlePage}\n            />\n          )}\n        </Grid>\n        <Grid item xs={2}>\n          <PagerButton\n            size=\"small\"\n            variant=\"contained\"\n            color=\"secondary\"\n            disabled={page === pages}\n            onClick={e => handleNext(e.nativeEvent)}\n          >\n            <FastForward />\n          </PagerButton>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n","export const breedsAreDifferent = (left: string[], right: string[]) => {\n  return (\n    left.length !== right.length ||\n    left.filter(item => !right.includes(item)).length > 0\n  );\n};\n\nexport const checkViewStateChange = (\n  breedsDataSource: string[],\n  breedsView: string[],\n  offset: number,\n  take: number,\n  isLoading: boolean,\n  changeEventIsNew: boolean\n): { newEvent?: Event; newOffset?: number; newView?: string[] } => {\n  const newView = breedsDataSource.slice(offset, offset + take);\n  const breedsChanged = breedsAreDifferent(newView, breedsView);\n  if (\n    breedsDataSource.length > 0 &&\n    !isLoading &&\n    (breedsChanged || changeEventIsNew)\n  ) {\n    if (breedsChanged && !changeEventIsNew) {\n      // breeds changed as a result of search, reset view state to page 1\n      return {\n        newEvent: new Event('breed search results'),\n        newOffset: 0,\n        newView: breedsDataSource.slice(0, take)\n      };\n    } else {\n      // breeds changed as a result of the view state controls\n      return {\n        newView\n      };\n    }\n  }\n\n  return {};\n};\n","import React, {\n  FunctionComponent,\n  useEffect,\n  useContext,\n  useReducer,\n  useCallback,\n  useRef,\n  useState\n} from 'react';\nimport { Grid, styled } from '@material-ui/core';\n\nimport { useDogs } from '../../utils/useDogs';\nimport { setHeaderSearchHandlerAction } from '../../utils/globalStateReducer';\nimport {\n  dataViewStateReducer,\n  DataViewStateReducer,\n  initDataViewState,\n  setOptionsAction,\n  setPageAction\n} from '../../utils/dataViewStateReducer';\nimport { GlobalStateContext } from '../GlobalStateContext';\nimport { BreedDetail } from './BreedDetail.model';\nimport { GalleryCard } from './GalleryCard';\nimport { GalleryPager } from './GalleryPager';\nimport { breedsAreDifferent, checkViewStateChange } from './helpers';\n\nconst GridOfCards = styled(Grid)({\n  height: 'calc(100vh - 175px)',\n  overflow: 'scroll'\n});\n\nconst GALLERY_PAGE_SIZE = 6;\n\nconst initEvent = new Event('init event');\n\ninterface Options {\n  breeds: string[];\n}\n\nexport const BreedGallery: FunctionComponent = () => {\n  const [breedDetails, setBreedDetails] = useState<BreedDetail[]>([]);\n  const { breeds, totalBreeds, loadBreedImages, searchBreeds } = useDogs();\n  const {\n    globalStateDispatch,\n    globalState: { isLoading }\n  } = useContext(GlobalStateContext);\n  const [\n    { offset, take, options, dataViewChangedEvent },\n    dataViewStateDispatch\n  ] = useReducer<DataViewStateReducer<any, any, Options>>(\n    dataViewStateReducer,\n    initDataViewState(GALLERY_PAGE_SIZE, { breeds: [] })\n  );\n  const lastChangeEvent = useRef(initEvent);\n\n  const setBreeds = useCallback(setOptionsAction(dataViewStateDispatch), [\n    dataViewStateDispatch\n  ]);\n  useEffect(() => {\n    setHeaderSearchHandlerAction(globalStateDispatch)(searchBreeds);\n    return () => {\n      setHeaderSearchHandlerAction(globalStateDispatch)(undefined);\n    };\n  }, [globalStateDispatch, searchBreeds]);\n\n  useEffect(() => {\n    const { newEvent, newOffset, newView } = checkViewStateChange(\n      breeds,\n      options.breeds,\n      offset,\n      take,\n      isLoading,\n      dataViewChangedEvent.timeStamp > lastChangeEvent.current.timeStamp\n    );\n    if (newEvent && newOffset !== undefined) {\n      lastChangeEvent.current = newEvent;\n      setPageAction(dataViewStateDispatch)({\n        nativeEvent: lastChangeEvent.current,\n        value: {\n          offset: newOffset,\n          take\n        }\n      });\n    }\n    if (newView) {\n      setBreeds({\n        nativeEvent: lastChangeEvent.current,\n        value: {\n          breeds: newView\n        }\n      });\n    }\n  }, [\n    breeds,\n    setBreeds,\n    dataViewChangedEvent,\n    isLoading,\n    options,\n    offset,\n    take\n  ]);\n\n  useEffect(() => {\n    if (\n      options.breeds.length > 0 &&\n      breedsAreDifferent(\n        breedDetails.map(detail => detail.breed),\n        options.breeds\n      ) &&\n      lastChangeEvent.current.timeStamp === dataViewChangedEvent.timeStamp &&\n      !isLoading\n    ) {\n      lastChangeEvent.current = new Event('loading images');\n      loadBreedImages(options.breeds).then(imageSets => {\n        if (imageSets) {\n          setBreedDetails(\n            imageSets.map(({ breed, imageUrls }) => ({\n              breed,\n              imageUrls\n            }))\n          );\n        }\n      });\n    }\n  }, [\n    options,\n    loadBreedImages,\n    breedDetails,\n    setBreedDetails,\n    isLoading,\n    dataViewChangedEvent\n  ]);\n\n  const handlePage = (offset: number, take: number, nativeEvent: Event) => {\n    setPageAction(dataViewStateDispatch)({\n      nativeEvent,\n      value: {\n        offset,\n        take\n      }\n    });\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      justify=\"space-evenly\"\n      alignItems=\"stretch\"\n      style={{ height: '100%' }}\n    >\n      <GridOfCards container item spacing={2}>\n        {breedDetails.map(breedDetail => (\n          <Grid item xs={4} key={breedDetail.breed}>\n            <GalleryCard breedDetail={breedDetail} />\n          </Grid>\n        ))}\n      </GridOfCards>\n      <Grid container item spacing={2}>\n        <Grid item xs={12}>\n          <GalleryPager\n            offset={offset}\n            take={take}\n            size={GALLERY_PAGE_SIZE}\n            total={totalBreeds}\n            onPageChange={handlePage}\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, {\n  FunctionComponent,\n  useReducer,\n  useState,\n  useEffect\n} from 'react';\nimport {\n  Container,\n  styled,\n  MuiThemeProvider,\n  createMuiTheme,\n  colors,\n  Snackbar\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\n\nimport { Header } from './components/Header';\nimport { Loader } from './components/Loader';\nimport { PictureBook } from './components/picturebook/PictureBook';\nimport { BreedGallery } from './components/gallery/BreedGallery';\nimport {\n  GlobalStateContext,\n  IGlobalStateContext\n} from './components/GlobalStateContext';\nimport {\n  globalStateReducer,\n  GlobalState,\n  setAlertMessageAction\n} from './utils/globalStateReducer';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: colors.indigo,\n    secondary: colors.orange\n  }\n});\n\nconst BodyContainer = styled(Container)({\n  marginTop: 100,\n  height: '100%'\n});\n\nconst INITIAL_STATE: GlobalState = {\n  isLoading: false,\n  headerSearchHandler: undefined,\n  selectedView: 'Gallery',\n  alertMessage: undefined\n};\n\nconst DEFAULT_MESSAGE_DURATION = 5000;\n\nconst App: FunctionComponent = () => {\n  const [alertVisible, setAlertVisible] = useState<boolean>(false);\n  const [globalState, globalStateDispatch] = useReducer(\n    globalStateReducer,\n    INITIAL_STATE\n  );\n  const globalContext: IGlobalStateContext = {\n    globalState,\n    globalStateDispatch\n  };\n  const deleteAlertMessage = () =>\n    setAlertMessageAction(globalStateDispatch)(undefined);\n  const { selectedView, alertMessage } = globalState;\n\n  useEffect(() => {\n    if (alertMessage) {\n      setAlertVisible(true);\n    }\n  }, [alertMessage]);\n\n  const handleCloseMessage = () => {\n    setAlertVisible(false);\n    deleteAlertMessage();\n  };\n\n  return (\n    <div className=\"App\">\n      <MuiThemeProvider theme={theme}>\n        <GlobalStateContext.Provider value={globalContext}>\n          <Header />\n          <BodyContainer>\n            <Loader />\n            {selectedView === 'Picture Book' && <PictureBook />}\n            {selectedView === 'Gallery' && <BreedGallery />}\n          </BodyContainer>\n        </GlobalStateContext.Provider>\n      </MuiThemeProvider>\n      <Snackbar\n        open={alertVisible}\n        autoHideDuration={DEFAULT_MESSAGE_DURATION}\n        onClose={handleCloseMessage}\n      >\n        <Alert severity={alertMessage?.severity}>{alertMessage?.message}</Alert>\n      </Snackbar>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}